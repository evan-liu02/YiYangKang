package com.anju.yyk.common.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_ORDER_CONFIG".
*/
public class CommonOrderConfigDao extends AbstractDao<CommonOrderConfig, Long> {

    public static final String TABLENAME = "COMMON_ORDER_CONFIG";

    /**
     * Properties of entity CommonOrderConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order_type = new Property(1, Integer.class, "order_type", false, "ORDER_TYPE");
        public final static Property Service_url = new Property(2, String.class, "service_url", false, "SERVICE_URL");
        public final static Property Explain = new Property(3, String.class, "explain", false, "EXPLAIN");
        public final static Property Is_must = new Property(4, Integer.class, "is_must", false, "IS_MUST");
        public final static Property Acceptance_url = new Property(5, String.class, "acceptance_url", false, "ACCEPTANCE_URL");
        public final static Property Acceptance_extra = new Property(6, String.class, "acceptance_extra", false, "ACCEPTANCE_EXTRA");
        public final static Property Acceptance_is_must = new Property(7, Integer.class, "acceptance_is_must", false, "ACCEPTANCE_IS_MUST");
    }


    public CommonOrderConfigDao(DaoConfig config) {
        super(config);
    }
    
    public CommonOrderConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_ORDER_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_TYPE\" INTEGER," + // 1: order_type
                "\"SERVICE_URL\" TEXT," + // 2: service_url
                "\"EXPLAIN\" TEXT," + // 3: explain
                "\"IS_MUST\" INTEGER," + // 4: is_must
                "\"ACCEPTANCE_URL\" TEXT," + // 5: acceptance_url
                "\"ACCEPTANCE_EXTRA\" TEXT," + // 6: acceptance_extra
                "\"ACCEPTANCE_IS_MUST\" INTEGER);"); // 7: acceptance_is_must
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_ORDER_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonOrderConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer order_type = entity.getOrder_type();
        if (order_type != null) {
            stmt.bindLong(2, order_type);
        }
 
        String service_url = entity.getService_url();
        if (service_url != null) {
            stmt.bindString(3, service_url);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(4, explain);
        }
 
        Integer is_must = entity.getIs_must();
        if (is_must != null) {
            stmt.bindLong(5, is_must);
        }
 
        String acceptance_url = entity.getAcceptance_url();
        if (acceptance_url != null) {
            stmt.bindString(6, acceptance_url);
        }
 
        String acceptance_extra = entity.getAcceptance_extra();
        if (acceptance_extra != null) {
            stmt.bindString(7, acceptance_extra);
        }
 
        Integer acceptance_is_must = entity.getAcceptance_is_must();
        if (acceptance_is_must != null) {
            stmt.bindLong(8, acceptance_is_must);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonOrderConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer order_type = entity.getOrder_type();
        if (order_type != null) {
            stmt.bindLong(2, order_type);
        }
 
        String service_url = entity.getService_url();
        if (service_url != null) {
            stmt.bindString(3, service_url);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(4, explain);
        }
 
        Integer is_must = entity.getIs_must();
        if (is_must != null) {
            stmt.bindLong(5, is_must);
        }
 
        String acceptance_url = entity.getAcceptance_url();
        if (acceptance_url != null) {
            stmt.bindString(6, acceptance_url);
        }
 
        String acceptance_extra = entity.getAcceptance_extra();
        if (acceptance_extra != null) {
            stmt.bindString(7, acceptance_extra);
        }
 
        Integer acceptance_is_must = entity.getAcceptance_is_must();
        if (acceptance_is_must != null) {
            stmt.bindLong(8, acceptance_is_must);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommonOrderConfig readEntity(Cursor cursor, int offset) {
        CommonOrderConfig entity = new CommonOrderConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // order_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // service_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // explain
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // is_must
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // acceptance_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // acceptance_extra
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // acceptance_is_must
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonOrderConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder_type(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setService_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExplain(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_must(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAcceptance_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAcceptance_extra(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAcceptance_is_must(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommonOrderConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommonOrderConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonOrderConfig entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
